package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
    "sync"
)

func main(){
    var wg sync.WaitGroup
    var mu sync.Mutex
    emails := make([]string, 0)
    
    for i:= 1; i<= 100; i++{
        wg.Add(1)
        go func(i int){
            defer wg.Done()
            url:= fmt.Sprintf("https://jsonplaceholder.typicode.com/posts/%d/comments", i)
            resp, err := http.Get(url)
            if err != nil {
                fmt.Printf("Error fetching URL %s: %v",url, err)
                return
            }
            defer resp.Body.Close()


            body, err := ioutil.ReadAll(resp.Body)
            if err != nil{
                fmt.Printf("Error reading response body from URL %s:%V", url, err)
                return
            }

            // 提取邮箱
            emailsInBody:= extractEmails(string(body))

            // 将邮箱添加进去
            mu.Lock()
            emails = append(emails,emailsInBody...)
            mu.Unlock()
        }(i)
    }

    wg.Wait()

    // 写入文件
    err:=ioutil.WriteFile("emails.txt",[]byte(fmt.Sprintf("%v",emails)),0644)
    if err!= nil{
        fmt.Printf("Error writingemails to file: %v",err)
        return
    }

    fmt.Println("Done!")
}


func extractEmails(textstring)[]lstring{
    emails:= make([]string, 0)
    for_, line:= rangestrings.Split(text,""){
        if strings.Contains(line,"email"){
            email:= strings.TrimSpace(strings.Split(line,":")[1])
            emails = append(emails,email)
        }
    }
    return emails
}
